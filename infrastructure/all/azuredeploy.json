{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "appName": {
      "type": "string",
      "metadata": {
        "description": "The name of the function app that you wish to create."
      }
    },
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "Storage Account type"
      }
    }
  },
  "variables": {
    "location": "[resourceGroup().location]",
    "sensorDataEventHub": {
      "name": "flood-sensors-hub",
      "namespace": "flood-detection-ns",
      "consumerGroup": "flood-events-listener",
      "partitionCount": 2,
      "keyName": "RootManageSharedAccessKey"
    },
    "anomalyDataEventHub": {
      "name": "anomaly-data-hub",
      "eventHubName": "anomaly-data-hub",
      "namespace": "anomaly-detection-ns",
      "consumerGroup": "anomaly-events-listener",
      "partitionCount": 2,
      "keyName": "RootManageSharedAccessKey"
    },
    "anomalyDetectionStreamingJob": {
      "name": "anomaly-detection",
      "input": {
        "name": "sensor-events",
        "eventHubName": "[variables('sensorDataEventHub').name]",
        "namespace": "[variables('sensorDataEventHub').namespace]",
        "consumerGroup": "[variables('sensorDataEventHub').consumerGroup]",
        "policyName": "[variables('sensorDataEventHub').keyName]"
      },
      "transformation": {
        "name": "detect-anomalies",
        "streamingUnits": 1,
        "query": "SELECT \r\n\tSystem.Timestamp AS outputTime,\r\n\tsensor,\r\n\tAVG(value) as averageWaterLevel\r\nINTO\r\n\t\"anomaly-events\"\r\nFROM\r\n\t\"sensor-events\"\r\nGROUP BY TumblingWindow(minute, 30), sensor\r\n\tHAVING AVG(value) > 3"
      },
      "output": {
        "name": "anomaly-events",
        "eventHubName": "[variables('anomalyDataEventHub').name]",
        "namespace": "[variables('anomalyDataEventHub').namespace]",
        "consumerGroup": "[variables('anomalyDataEventHub').consumerGroup]",
        "policyName": "[variables('anomalyDataEventHub').keyName]"
      }
    },
    "functionAppName": "[parameters('appName')]",
    "hostingPlanName": "[parameters('appName')]",
    "storageAccountName": "[concat(uniquestring(resourceGroup().id), 'azfunctions')]",
    "storageAccountid": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]"
  },
  "resources": [
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('sensorDataEventHub').namespace]",
      "type": "Microsoft.EventHub/Namespaces",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard",
        "tier": "Standard"
      },
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "name": "[variables('sensorDataEventHub').name]",
          "type": "EventHubs",
          "dependsOn": [
            "[concat('Microsoft.EventHub/namespaces/', variables('sensorDataEventHub').namespace)]"
          ],
          "properties": {
            "path": "[variables('sensorDataEventHub').name]",
            "PartitionCount": "[variables('sensorDataEventHub').partitionCount]"
          },
          "resources": [
            {
              "apiVersion": "2015-08-01",
              "name": "[variables('sensorDataEventHub').consumerGroup]",
              "type": "ConsumerGroups",
              "dependsOn": [
                "[variables('sensorDataEventHub').name]"
              ]
            }
          ]
        }
      ]
    },
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('anomalyDataEventHub').namespace]",
      "type": "Microsoft.EventHub/Namespaces",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard",
        "tier": "Standard"
      },
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "name": "[variables('anomalyDataEventHub').name]",
          "type": "EventHubs",
          "dependsOn": [
            "[concat('Microsoft.EventHub/namespaces/', variables('anomalyDataEventHub').namespace)]"
          ],
          "properties": {
            "path": "[variables('anomalyDataEventHub').name]",
            "PartitionCount": "[variables('anomalyDataEventHub').partitionCount]"
          },
          "resources": [
            {
              "apiVersion": "2015-08-01",
              "name": "[variables('anomalyDataEventHub').consumerGroup]",
              "type": "ConsumerGroups",
              "dependsOn": [
                "[variables('anomalyDataEventHub').name]"
              ]
            }
          ]
        }
      ]
    },
    {
      "apiVersion": "2015-09-01",
      "type": "Microsoft.StreamAnalytics/StreamingJobs",
      "name": "[variables('anomalyDetectionStreamingJob').name]",
      "location": "[variables('location')]",
      "properties": {
        "sku": {
          "name": "Standard"
        },
        "inputs": [
          {
            "name": "[variables('anomalyDetectionStreamingJob').input.name]",
            "properties": {
              "type": "stream",
              "serialization": {
                "type": "JSON",
                "properties": {
                  "encoding": "UTF8"
                }
              },
              "datasource": {
                "type": "Microsoft.ServiceBus/EventHub",
                "properties": {
                  "eventHubName": "[variables('anomalyDetectionStreamingJob').input.eventHubName]",
                  "serviceBusNamespace": "[variables('anomalyDetectionStreamingJob').input.namespace]",
                  "consumerGroupName": "[variables('anomalyDetectionStreamingJob').input.consumerGroup]",
                  "sharedAccessPolicyName": "[variables('anomalyDetectionStreamingJob').input.policyName]",
                  "sharedAccessPolicyKey": "[listKeys(resourceId('Microsoft.Eventhub/namespaces/authorizationRules', variables('anomalyDetectionStreamingJob').input.namespace, variables('anomalyDetectionStreamingJob').input.policyName), '2014-09-01').primaryKey]"
                }
              }
            }
          }
        ],
        "transformation": {
          "name": "[variables('anomalyDetectionStreamingJob').transformation.name]",
          "properties": {
            "streamingUnits": "[variables('anomalyDetectionStreamingJob').transformation.streamingUnits]",
            "query": "[variables('anomalyDetectionStreamingJob').transformation.query]"
          }
        },
        "outputs": [
          {
            "name": "[variables('anomalyDetectionStreamingJob').output.name]",
            "properties": {
              "type": "stream",
              "serialization": {
                "type": "JSON",
                "properties": {
                  "encoding": "UTF8"
                }
              },
              "datasource": {
                "type": "Microsoft.ServiceBus/EventHub",
                "properties": {
                  "eventHubName": "[variables('anomalyDetectionStreamingJob').output.eventHubName]",
                  "serviceBusNamespace": "[variables('anomalyDetectionStreamingJob').output.namespace]",
                  "sharedAccessPolicyName": "[variables('anomalyDetectionStreamingJob').output.policyName]",
                  "sharedAccessPolicyKey": "[listKeys(resourceId('Microsoft.Eventhub/namespaces/authorizationRules', variables('anomalyDetectionStreamingJob').output.namespace, variables('anomalyDetectionStreamingJob').output.policyName), '2014-09-01').primaryKey]"
                }
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('anomalyDetectionStreamingJob').input.namespace)]",
        "[resourceId('Microsoft.EventHub/namespaces', variables('anomalyDetectionStreamingJob').output.namespace)]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('storageAccountName')]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[parameters('storageAccountType')]"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2015-04-01",
      "name": "[variables('hostingPlanName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "name": "[variables('hostingPlanName')]",
        "computeMode": "Dynamic",
        "sku": "Dynamic"
      }
    },
    {
      "apiVersion": "2015-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('functionAppName')]",
      "location": "[resourceGroup().location]",
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('functionAppName'))]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~1"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "6.5.0"
            }
          ]
        }
      }
    }
  ]
}