{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "Storage Account type"
      }
    },
    "vmSku": {
      "type": "string",
      "defaultValue": "Standard_A1",
      "metadata": {
        "description": "Size of VMs in the VM Scale Set."
      }
    },
    "vmssName":{
      "type":"string",
      "metadata":{
        "description":"String used as a base for naming resources. Must be 3-61 characters in length and globally unique across Azure. A hash is prepended to this string for some resources, and resource-specific information is appended."
      },
      "maxLength": 61
    },
    "instanceCount": {
      "type": "int",
      "metadata": {
        "description": "Number of VM instances (100 or less)."
      },
      "maxValue": 100
    },
    "adminUsername": {
      "type": "string",
      "metadata": {
        "description": "Admin username on all VMs."
      }
    },
    "adminPassword": {
      "type": "securestring",
      "metadata": {
        "description": "Admin password on all VMs."
      }
    },
    "customImageUri": {
      "type": "string"
    },
    "osType": {
      "type": "string",
      "allowedValues": ["Windows", "Linux"]
    }
  },
  "variables": {
    "location": "[resourceGroup().location]",


    "sensorDataEventHub": {
      "name": "flood-sensors-hub",
      "namespace": "flood-detection-ns",
      "consumerGroup": "flood-events-listener",
      "partitionCount": 2,
      "keyName": "RootManageSharedAccessKey"
    },


    "anomalyDataEventHub": {
      "name": "anomaly-data-hub",
      "eventHubName": "anomaly-data-hub",
      "namespace": "anomaly-detection-ns",
      "consumerGroup": "anomaly-events-listener",
      "partitionCount": 2,
      "keyName": "RootManageSharedAccessKey"
    },


    "anomalyDetectionStreamingJob": {
      "name": "anomaly-detection",
      "input": {
        "name": "sensor-events",
        "eventHubName": "[variables('sensorDataEventHub').name]",
        "namespace": "[variables('sensorDataEventHub').namespace]",
        "consumerGroup": "[variables('sensorDataEventHub').consumerGroup]",
        "policyName": "[variables('sensorDataEventHub').keyName]"
      },
      "transformation": {
        "name": "detect-anomalies",
        "streamingUnits": 1,
        "query": "SELECT \r\n\tSystem.Timestamp AS outputTime,\r\n\tsensor,\r\n\tAVG(value) as averageWaterLevel\r\nINTO\r\n\t\"anomaly-events\"\r\nFROM\r\n\t\"sensor-events\"\r\nGROUP BY TumblingWindow(minute, 30), sensor\r\n\tHAVING AVG(value) > 3"
      },
      "output": {
        "name": "anomaly-events",
        "eventHubName": "[variables('anomalyDataEventHub').name]",
        "namespace": "[variables('anomalyDataEventHub').namespace]",
        "consumerGroup": "[variables('anomalyDataEventHub').consumerGroup]",
        "policyName": "[variables('anomalyDataEventHub').keyName]"
      }
    },


    "__functionStorageAccountName": "[concat(uniquestring(resourceGroup().id), 'azfunctions')]",
    "workerFunction": {
      "name": "function-worker",
      "containerName": "function-workers",
      "storageAccountName": "[variables('__functionStorageAccountName')]",
      "storageAccountId": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', variables('__functionStorageAccountName'))]",
      "storageAccountType": "[parameters('storageAccountType')]",
      "hostingPlanName": "function-workers",
      "repoUrl": "https://github.com/slnowak/flood-detection-worker.git",
      "branch": "master"
    },

    "__namingInfix": "[toLower(substring(concat(parameters('vmssName'), uniqueString(resourceGroup().id)), 0, 9))]",
    "__longNamingInfix": "[toLower(parameters('vmssName'))]",
    "workerVMSet": {},
    "vhdContainerName": "[concat(variables('__namingInfix'), 'vhd')]",
    "addressPrefix": "10.0.0.0/16",
    "subnetPrefix": "10.0.0.0/24",
    "imageName": "[concat(variables('__namingInfix'), 'img')]",
    "virtualNetworkName": "[concat(variables('__namingInfix'), 'vnet')]",
    "publicIPAddressName": "[concat(variables('__namingInfix'), 'pip')]",
    "subnetName": "[concat(variables('__namingInfix'), 'subnet')]",
    "loadBalancerName": "[concat(variables('__namingInfix'), 'lb')]",
    "publicIPAddressID": "[resourceId('Microsoft.Network/publicIPAddresses',variables('publicIPAddressName'))]",
    "lbID": "[resourceId('Microsoft.Network/loadBalancers',variables('loadBalancerName'))]",
    "natPoolName": "[concat(variables('__namingInfix'), 'natpool')]",
    "bePoolName": "[concat(variables('__namingInfix'), 'bepool')]",
    "natStartPort": 50000,
    "natEndPort": 50119,
    "natBackendPort": 22,
    "nicName": "[concat(variables('__namingInfix'), 'nic')]",
    "ipConfigName": "[concat(variables('__namingInfix'), 'ipconfig')]",
    "frontEndIPConfigID": "[concat(variables('lbID'),'/frontendIPConfigurations/loadBalancerFrontEnd')]",
    "computeApiVersion": "2016-04-30-preview",
    "networkApiVersion": "2016-03-30",
    "__vmStorageAccountName": "[concat(uniquestring(resourceGroup().id), 'vmworker')]",
    "workerVM": {
      "network": {
      "storage": {
        "accountName": "[variables('__vmStorageAccountName')]",
        "accountId": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', variables('__vmStorageAccountName'))]",
        "accountType": "Standard_LRS"
      }
    }
  },

  "resources": [
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('sensorDataEventHub').namespace]",
      "type": "Microsoft.EventHub/Namespaces",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard",
        "tier": "Standard"
      },
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "name": "[variables('sensorDataEventHub').name]",
          "type": "EventHubs",
          "dependsOn": [
            "[concat('Microsoft.EventHub/namespaces/', variables('sensorDataEventHub').namespace)]"
          ],
          "properties": {
            "path": "[variables('sensorDataEventHub').name]",
            "PartitionCount": "[variables('sensorDataEventHub').partitionCount]"
          },
          "resources": [
            {
              "apiVersion": "2015-08-01",
              "name": "[variables('sensorDataEventHub').consumerGroup]",
              "type": "ConsumerGroups",
              "dependsOn": [
                "[variables('sensorDataEventHub').name]"
              ]
            }
          ]
        }
      ]
    },
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('anomalyDataEventHub').namespace]",
      "type": "Microsoft.EventHub/Namespaces",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard",
        "tier": "Standard"
      },
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "name": "[variables('anomalyDataEventHub').name]",
          "type": "EventHubs",
          "dependsOn": [
            "[concat('Microsoft.EventHub/namespaces/', variables('anomalyDataEventHub').namespace)]"
          ],
          "properties": {
            "path": "[variables('anomalyDataEventHub').name]",
            "PartitionCount": "[variables('anomalyDataEventHub').partitionCount]"
          },
          "resources": [
            {
              "apiVersion": "2015-08-01",
              "name": "[variables('anomalyDataEventHub').consumerGroup]",
              "type": "ConsumerGroups",
              "dependsOn": [
                "[variables('anomalyDataEventHub').name]"
              ]
            }
          ]
        }
      ]
    },
    {
      "apiVersion": "2015-09-01",
      "type": "Microsoft.StreamAnalytics/StreamingJobs",
      "name": "[variables('anomalyDetectionStreamingJob').name]",
      "location": "[variables('location')]",
      "properties": {
        "sku": {
          "name": "Standard"
        },
        "inputs": [
          {
            "name": "[variables('anomalyDetectionStreamingJob').input.name]",
            "properties": {
              "type": "stream",
              "serialization": {
                "type": "JSON",
                "properties": {
                  "encoding": "UTF8"
                }
              },
              "datasource": {
                "type": "Microsoft.ServiceBus/EventHub",
                "properties": {
                  "eventHubName": "[variables('anomalyDetectionStreamingJob').input.eventHubName]",
                  "serviceBusNamespace": "[variables('anomalyDetectionStreamingJob').input.namespace]",
                  "consumerGroupName": "[variables('anomalyDetectionStreamingJob').input.consumerGroup]",
                  "sharedAccessPolicyName": "[variables('anomalyDetectionStreamingJob').input.policyName]",
                  "sharedAccessPolicyKey": "[listKeys(resourceId('Microsoft.Eventhub/namespaces/authorizationRules', variables('anomalyDetectionStreamingJob').input.namespace, variables('anomalyDetectionStreamingJob').input.policyName), '2014-09-01').primaryKey]"
                }
              }
            }
          }
        ],
        "transformation": {
          "name": "[variables('anomalyDetectionStreamingJob').transformation.name]",
          "properties": {
            "streamingUnits": "[variables('anomalyDetectionStreamingJob').transformation.streamingUnits]",
            "query": "[variables('anomalyDetectionStreamingJob').transformation.query]"
          }
        },
        "outputs": [
          {
            "name": "[variables('anomalyDetectionStreamingJob').output.name]",
            "properties": {
              "type": "stream",
              "serialization": {
                "type": "JSON",
                "properties": {
                  "encoding": "UTF8"
                }
              },
              "datasource": {
                "type": "Microsoft.ServiceBus/EventHub",
                "properties": {
                  "eventHubName": "[variables('anomalyDetectionStreamingJob').output.eventHubName]",
                  "serviceBusNamespace": "[variables('anomalyDetectionStreamingJob').output.namespace]",
                  "sharedAccessPolicyName": "[variables('anomalyDetectionStreamingJob').output.policyName]",
                  "sharedAccessPolicyKey": "[listKeys(resourceId('Microsoft.Eventhub/namespaces/authorizationRules', variables('anomalyDetectionStreamingJob').output.namespace, variables('anomalyDetectionStreamingJob').output.policyName), '2014-09-01').primaryKey]"
                }
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('anomalyDetectionStreamingJob').input.namespace)]",
        "[resourceId('Microsoft.EventHub/namespaces', variables('anomalyDetectionStreamingJob').output.namespace)]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('workerFunction').storageAccountName]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[variables('workerFunction').storageAccountType]"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2015-04-01",
      "name": "[variables('workerFunction').hostingPlanName]",
      "location": "[resourceGroup().location]",
      "properties": {
        "name": "[variables('workerFunction').hostingPlanName]",
        "computeMode": "Dynamic",
        "sku": "Dynamic"
      }
    },
    {
      "apiVersion": "2015-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('workerFunction').containerName]",
      "location": "[resourceGroup().location]",
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('workerFunction').hostingPlanName)]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('workerFunction').storageAccountName)]",
        "[resourceId('Microsoft.EventHub/Namespaces/', variables('anomalyDataEventHub').namespace)]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('workerFunction').hostingPlanName)]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('workerFunction').storageAccountName, ';AccountKey=', listKeys(variables('workerFunction').storageAccountId,'2015-05-01-preview').key1)]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('workerFunction').storageAccountName, ';AccountKey=', listKeys(variables('workerFunction').storageAccountId,'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('workerFunction').storageAccountName, ';AccountKey=', listKeys(variables('workerFunction').storageAccountId,'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('workerFunction').containerName)]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~1"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "6.5.0"
            },
            {
              "name": "eventHubConnection",
              "value": "[listKeys(resourceId('Microsoft.Eventhub/namespaces/authorizationRules', variables('anomalyDataEventHub').namespace, variables('anomalyDataEventHub').keyName), '2014-09-01').primaryConnectionString]"
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "name": "web",
          "type": "sourcecontrols",
          "properties": {
            "RepoUrl": "[variables('workerFunction').repoUrl]",
            "branch": "[variables('workerFunction').branch]",
            "IsManualIntegration": true
          },
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('workerFunction').containerName)]"
          ]
        }
      ]
    },

    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('workerVM').storage.accountName]",
      "apiVersion": "2017-06-01",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "[variables('workerVM').storage.accountType]"
      },
      "kind": "Storage",
      "properties": {}
    },
    {
      "type": "Microsoft.Compute/images",
      "apiVersion": "2016-04-30-preview",
      "name": "[variables('imageName')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "storageProfile": {
          "osDisk" : {
            "osType" : "[parameters('osType')]",
            "osState": "Generalized",
            "blobUri": "[parameters('customImageUri')]",
            "caching": "ReadWrite",
            "storageAccountType": "Standard_LRS"
          }
        }
      }
    },
    {
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('virtualNetworkName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('networkApiVersion')]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('addressPrefix')]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('subnetName')]",
            "properties": {
              "addressPrefix": "[variables('subnetPrefix')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('publicIPAddressName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('networkApiVersion')]",
      "properties": {
        "publicIPAllocationMethod": "Dynamic",
        "dnsSettings": {
          "domainNameLabel": "[variables('__longNamingInfix')]"
        }
      }
    },
    {
      "type": "Microsoft.Network/loadBalancers",
      "name": "[variables('loadBalancerName')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('networkApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]"
      ],
      "properties": {
        "frontendIPConfigurations": [
          {
            "name": "LoadBalancerFrontEnd",
            "properties": {
              "publicIPAddress": {
                "id": "[variables('publicIPAddressID')]"
              }
            }
          }
        ],
        "backendAddressPools": [
          {
            "name": "[variables('bePoolName')]"
          }
        ],
        "inboundNatPools": [
          {
            "name": "[variables('natPoolName')]",
            "properties": {
              "frontendIPConfiguration": {
                "id": "[variables('frontEndIPConfigID')]"
              },
              "protocol": "tcp",
              "frontendPortRangeStart": "[variables('natStartPort')]",
              "frontendPortRangeEnd": "[variables('natEndPort')]",
              "backendPort": "[variables('natBackendPort')]"
            }
          }
        ]
      }
    },
    {
      "type": "Microsoft.Compute/virtualMachineScaleSets",
      "name": "[variables('__namingInfix')]",
      "location": "[resourceGroup().location]",
      "apiVersion": "[variables('computeApiVersion')]",
      "dependsOn": [
        "[concat('Microsoft.Compute/images/', variables('imageName'))]",
        "[concat('Microsoft.Network/loadBalancers/', variables('loadBalancerName'))]",
        "[concat('Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'))]",
        "[resourceId('Microsoft.EventHub/Namespaces/', variables('anomalyDataEventHub').namespace)]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('workerVM').storage.accountName)]"
      ],
      "sku": {
        "name": "[parameters('vmSku')]",
        "tier": "Standard",
        "capacity": "[parameters('instanceCount')]"
      },
      "properties": {
        "overprovision": "true",
        "upgradePolicy": {
          "mode": "Manual"
        },
        "virtualMachineProfile": {
          "storageProfile": {
            "imageReference": {
              "id": "[resourceId('Microsoft.Compute/images', variables('imageName'))]"
            }
          },
          "osProfile": {
            "computerNamePrefix": "[variables('__namingInfix')]",
            "adminUsername": "[parameters('adminUsername')]",
            "adminPassword": "[parameters('adminPassword')]"
          },
          "networkProfile": {
            "networkInterfaceConfigurations": [
              {
                "name": "[variables('nicName')]",
                "properties": {
                  "primary": "true",
                  "ipConfigurations": [
                    {
                      "name": "[variables('ipConfigName')]",
                      "properties": {
                        "subnet": {
                          "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/virtualNetworks/', variables('virtualNetworkName'), '/subnets/', variables('subnetName'))]"
                        },
                        "loadBalancerBackendAddressPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/backendAddressPools/', variables('bePoolName'))]"
                          }
                        ],
                        "loadBalancerInboundNatPools": [
                          {
                            "id": "[concat('/subscriptions/', subscription().subscriptionId,'/resourceGroups/', resourceGroup().name, '/providers/Microsoft.Network/loadBalancers/', variables('loadBalancerName'), '/inboundNatPools/', variables('natPoolName'))]"
                          }
                        ]
                      }
                    }
                  ]
                }
              }
            ]
          },
          "extensionProfile": {
            "extensions": [
              {
                "name": "lapextension",
                "properties": {
                  "publisher": "Microsoft.Azure.Extensions",
                  "type": "CustomScript",
                  "typeHandlerVersion": "2.0",
                  "autoUpgradeMinorVersion": true,
                  "settings": {
                    "commandToExecute": "[concat('echo eventhub.consumergroupname=anomaly-events-listener >> /etc/environment && echo eventhub.namespacename=anomaly-detection-ns >> /etc/environment && echo eventhub.eventhubname=anomaly-data-hub >> /etc/environment && echo eventhub.saskeyname=RootManageSharedAccessKey >> /etc/environment && ', 'echo eventhub.saskey=', listKeys(resourceId('Microsoft.Eventhub/namespaces/authorizationRules', variables('anomalyDataEventHub').namespace, variables('anomalyDataEventHub').keyName), providers('Microsoft.Eventhub', 'namespaces').apiVersions[0]).primaryKey, ' >> /etc/environment', '&& echo storageaccount.name=', variables('workerVM').storage.accountName, ' >> /etc/environment', ' && echo storageaccount.key=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('workerVM').storage.accountName), providers('Microsoft.Storage', 'storageAccounts').apiVersions[0]).keys[0].value, ' >> /etc/environment')]"
                  }
                }
              }
            ]
          }
        }
      }
    }
  ]
}