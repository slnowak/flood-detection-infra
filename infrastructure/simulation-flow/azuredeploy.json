{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "functionName": {
      "type": "string",
      "defaultValue": "function-worker",
      "metadata": {
        "description": "The name of the function."
      }
    }
  },
  "variables": {
    "location": "[resourceGroup().location]",
    "jobQueue": {
      "name": "job-queue-hub",
      "namespace": "job-queue-ns",
      "lambdaConsumerGroup": "lambda-worker",
      "vmConsumerGroup": "vm-worker",
      "partitionCount": 2,
      "policyName": "RootManageSharedAccessKey"
    },
    "storageAccountName": "[concat(uniquestring(resourceGroup().id), 'azfunctions')]",
    "workerFunction": {
      "name": "[parameters('functionName')]",
      "containerName": "function-workers",
      "storageAccountName": "[variables('storageAccountName')]",
      "storageAccountId": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
      "storageAccountType": "Standard_LRS",
      "hostingPlanName": "function-workers"
    }
  },
  "resources": [
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('jobQueue').namespace]",
      "type": "Microsoft.EventHub/Namespaces",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard",
        "tier": "Standard"
      },
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "name": "[variables('jobQueue').name]",
          "type": "EventHubs",
          "dependsOn": [
            "[concat('Microsoft.EventHub/namespaces/', variables('jobQueue').namespace)]"
          ],
          "properties": {
            "path": "[variables('jobQueue').name]",
            "PartitionCount": "[variables('jobQueue').partitionCount]"
          },
          "resources": [
            {
              "apiVersion": "2015-08-01",
              "name": "[variables('jobQueue').lambdaConsumerGroup]",
              "type": "ConsumerGroups",
              "dependsOn": [
                "[variables('jobQueue').name]"
              ]
            },
            {
              "apiVersion": "2015-08-01",
              "name": "[variables('jobQueue').lambdaConsumerGroup]",
              "type": "ConsumerGroups",
              "dependsOn": [
                "[variables('jobQueue').name]"
              ]
            }
          ]
        }
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('workerFunction').storageAccountName]",
      "apiVersion": "2015-06-15",
      "location": "[variables('location')]",
      "properties": {
        "accountType": "[variables('workerFunction').storageAccountType]"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2015-04-01",
      "name": "[variables('workerFunction').hostingPlanName]",
      "location": "[variables('location')]",
      "properties": {
        "name": "[variables('workerFunction').hostingPlanName]",
        "computeMode": "Dynamic",
        "sku": "Dynamic"
      }
    },
    {
      "apiVersion": "2015-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('workerFunction').containerName]",
      "location": "[variables('location')]",
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('workerFunction').hostingPlanName)]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('workerFunction').storageAccountName)]",
        "[resourceId('Microsoft.EventHub/namespaces', variables('jobQueue').namespace)]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('workerFunction').hostingPlanName)]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('workerFunction').storageAccountName, ';AccountKey=', listKeys(variables('workerFunction').storageAccountId,'2015-05-01-preview').key1)]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('workerFunction').storageAccountName, ';AccountKey=', listKeys(variables('workerFunction').storageAccountId,'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('workerFunction').storageAccountName, ';AccountKey=', listKeys(variables('workerFunction').storageAccountId,'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('workerFunction').containerName)]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~1"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "6.5.0"
            },
            {
              "name": "eventHubConnection",
              "value": "[listKeys(resourceId('Microsoft.Eventhub/namespaces/authorizationRules', variables('jobQueue').namespace, variables('jobQueue').policyName), '2014-09-01').primaryConnectionString]"
            }
          ]
        }
      }
    },
    {
      "apiVersion": "2015-08-01",
      "name": "[concat(variables('workerFunction').containerName,'/', variables('workerFunction').name)]",
      "type": "Microsoft.Web/sites/functions",
      "properties": {
        "config": {
          "bindings": [
            {
              "direction": "in",
              "type": "eventHubTrigger",
              "name": "eventHubBinding",
              "path": "[variables('jobQueue').name]",
              "consumerGroup": "[variables('jobQueue').lambdaConsumerGroup]",
              "connection": "eventHubConnection"
            }
          ]
        },
        "files": {
          "index.js": "module.exports = function (context, myQueueItem) { context.log('JavaScript queue trigger function processed work item', myQueueItem); context.done(); };"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Web/sites', variables('workerFunction').containerName)]"
      ]
    }
  ]
}