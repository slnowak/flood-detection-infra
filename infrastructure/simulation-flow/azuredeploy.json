{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "storageAccountType": {
      "type": "string",
      "defaultValue": "Standard_LRS",
      "allowedValues": [
        "Standard_LRS",
        "Standard_GRS",
        "Standard_ZRS",
        "Premium_LRS"
      ],
      "metadata": {
        "description": "Storage Account type"
      }
    }
  },
  "variables": {
    "location": "[resourceGroup().location]",


    "sensorDataEventHub": {
      "name": "flood-sensors-hub",
      "namespace": "flood-detection-ns",
      "consumerGroup": "flood-events-listener",
      "partitionCount": 2,
      "keyName": "RootManageSharedAccessKey"
    },


    "anomalyDataEventHub": {
      "name": "anomaly-data-hub",
      "eventHubName": "anomaly-data-hub",
      "namespace": "anomaly-detection-ns",
      "consumerGroup": "anomaly-events-listener",
      "partitionCount": 2,
      "keyName": "RootManageSharedAccessKey"
    },


    "anomalyDetectionStreamingJob": {
      "name": "anomaly-detection",
      "input": {
        "name": "sensor-events",
        "eventHubName": "[variables('sensorDataEventHub').name]",
        "namespace": "[variables('sensorDataEventHub').namespace]",
        "consumerGroup": "[variables('sensorDataEventHub').consumerGroup]",
        "policyName": "[variables('sensorDataEventHub').keyName]"
      },
      "transformation": {
        "name": "detect-anomalies",
        "streamingUnits": 1,
        "query": "SELECT \r\n\tSystem.Timestamp AS outputTime,\r\n\tsensor,\r\n\tAVG(value) as averageWaterLevel\r\nINTO\r\n\t\"anomaly-events\"\r\nFROM\r\n\t\"sensor-events\"\r\nGROUP BY TumblingWindow(minute, 30), sensor\r\n\tHAVING AVG(value) > 3"
      },
      "output": {
        "name": "anomaly-events",
        "eventHubName": "[variables('anomalyDataEventHub').name]",
        "namespace": "[variables('anomalyDataEventHub').namespace]",
        "consumerGroup": "[variables('anomalyDataEventHub').consumerGroup]",
        "policyName": "[variables('anomalyDataEventHub').keyName]"
      }
    },


    "functionStorageAccountName": "[concat(uniquestring(resourceGroup().id), 'azfunctions')]",
    "workerFunction": {
      "name": "function-worker",
      "containerName": "function-workers",
      "storageAccountName": "[variables('functionStorageAccountName')]",
      "storageAccountId": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', variables('functionStorageAccountName'))]",
      "storageAccountType": "[parameters('storageAccountType')]",
      "hostingPlanName": "function-workers",
      "repoUrl": "https://github.com/slnowak/flood-detection-worker.git",
      "branch": "master"
    },

    "__virtualNetworkName": "workerVNET",
    "__vnetID": "[resourceId('Microsoft.Network/virtualNetworks', variables('__virtualNetworkName'))]",
    "__subnetName": "workerSubnet",
    "__vmStorageAccountName": "[concat(uniquestring(resourceGroup().id), 'vmworker')]",
    "workerVM": {
      "network": {
        "nicName": "workerVMNic",
        "addressPrefix": "10.0.0.0/16",
        "subnetName": "[variables('__subnetName')]",
        "subnetPrefix": "10.0.0.0/24",
        "publicIPAddressName": "workerPublicIP",
        "publicIPAddressType": "Dynamic",
        "virtualNetworkName": "[variables('__virtualNetworkName')]",
        "vnetID": "[variables('__vnetID')]",
        "subnetRef": "[concat(variables('__vnetID'),'/subnets/', variables('__subnetName'))]",
        "dnsLabelPrefix": "vmworker"
      },
      "storage": {
        "accountName": "[variables('__vmStorageAccountName')]",
        "accountId": "[concat(resourceGroup().id,'/providers/','Microsoft.Storage/storageAccounts/', variables('__vmStorageAccountName'))]",
        "accountType": "Standard_LRS"
      },
      "machine": {
        "name": "simvm",
        "size": "Standard_A1",
        "adminUserName": "simvm",
        "adminPassword": "CHANGE_ME",
        "imageName": "packer-osDisk.ff05ac8e-ebd3-450c-8456-9a2bb5962812.vhd",
        "imageUri": "https://packerrgvm.blob.core.windows.net/system/Microsoft.Compute/Images/images/packer-osDisk.ff05ac8e-ebd3-450c-8456-9a2bb5962812.vhd",
        "vhdUri": "https://packerrgvm.blob.core.windows.net/vmcontainera9a5d715-fbd9-4139-8616-c4ac5e31d8dc/osDisk.a9a5d715-fbd9-4139-8616-c4ac5e31d8dc.vhd"
      }
    }
  },

  "resources": [
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('sensorDataEventHub').namespace]",
      "type": "Microsoft.EventHub/Namespaces",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard",
        "tier": "Standard"
      },
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "name": "[variables('sensorDataEventHub').name]",
          "type": "EventHubs",
          "dependsOn": [
            "[concat('Microsoft.EventHub/namespaces/', variables('sensorDataEventHub').namespace)]"
          ],
          "properties": {
            "path": "[variables('sensorDataEventHub').name]",
            "PartitionCount": "[variables('sensorDataEventHub').partitionCount]"
          },
          "resources": [
            {
              "apiVersion": "2015-08-01",
              "name": "[variables('sensorDataEventHub').consumerGroup]",
              "type": "ConsumerGroups",
              "dependsOn": [
                "[variables('sensorDataEventHub').name]"
              ]
            }
          ]
        }
      ]
    },
    {
      "apiVersion": "2015-08-01",
      "name": "[variables('anomalyDataEventHub').namespace]",
      "type": "Microsoft.EventHub/Namespaces",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard",
        "tier": "Standard"
      },
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "name": "[variables('anomalyDataEventHub').name]",
          "type": "EventHubs",
          "dependsOn": [
            "[concat('Microsoft.EventHub/namespaces/', variables('anomalyDataEventHub').namespace)]"
          ],
          "properties": {
            "path": "[variables('anomalyDataEventHub').name]",
            "PartitionCount": "[variables('anomalyDataEventHub').partitionCount]"
          },
          "resources": [
            {
              "apiVersion": "2015-08-01",
              "name": "[variables('anomalyDataEventHub').consumerGroup]",
              "type": "ConsumerGroups",
              "dependsOn": [
                "[variables('anomalyDataEventHub').name]"
              ]
            }
          ]
        }
      ]
    },
    {
      "apiVersion": "2015-09-01",
      "type": "Microsoft.StreamAnalytics/StreamingJobs",
      "name": "[variables('anomalyDetectionStreamingJob').name]",
      "location": "[variables('location')]",
      "properties": {
        "sku": {
          "name": "Standard"
        },
        "inputs": [
          {
            "name": "[variables('anomalyDetectionStreamingJob').input.name]",
            "properties": {
              "type": "stream",
              "serialization": {
                "type": "JSON",
                "properties": {
                  "encoding": "UTF8"
                }
              },
              "datasource": {
                "type": "Microsoft.ServiceBus/EventHub",
                "properties": {
                  "eventHubName": "[variables('anomalyDetectionStreamingJob').input.eventHubName]",
                  "serviceBusNamespace": "[variables('anomalyDetectionStreamingJob').input.namespace]",
                  "consumerGroupName": "[variables('anomalyDetectionStreamingJob').input.consumerGroup]",
                  "sharedAccessPolicyName": "[variables('anomalyDetectionStreamingJob').input.policyName]",
                  "sharedAccessPolicyKey": "[listKeys(resourceId('Microsoft.Eventhub/namespaces/authorizationRules', variables('anomalyDetectionStreamingJob').input.namespace, variables('anomalyDetectionStreamingJob').input.policyName), '2014-09-01').primaryKey]"
                }
              }
            }
          }
        ],
        "transformation": {
          "name": "[variables('anomalyDetectionStreamingJob').transformation.name]",
          "properties": {
            "streamingUnits": "[variables('anomalyDetectionStreamingJob').transformation.streamingUnits]",
            "query": "[variables('anomalyDetectionStreamingJob').transformation.query]"
          }
        },
        "outputs": [
          {
            "name": "[variables('anomalyDetectionStreamingJob').output.name]",
            "properties": {
              "type": "stream",
              "serialization": {
                "type": "JSON",
                "properties": {
                  "encoding": "UTF8"
                }
              },
              "datasource": {
                "type": "Microsoft.ServiceBus/EventHub",
                "properties": {
                  "eventHubName": "[variables('anomalyDetectionStreamingJob').output.eventHubName]",
                  "serviceBusNamespace": "[variables('anomalyDetectionStreamingJob').output.namespace]",
                  "sharedAccessPolicyName": "[variables('anomalyDetectionStreamingJob').output.policyName]",
                  "sharedAccessPolicyKey": "[listKeys(resourceId('Microsoft.Eventhub/namespaces/authorizationRules', variables('anomalyDetectionStreamingJob').output.namespace, variables('anomalyDetectionStreamingJob').output.policyName), '2014-09-01').primaryKey]"
                }
              }
            }
          }
        ]
      },
      "dependsOn": [
        "[resourceId('Microsoft.EventHub/namespaces', variables('anomalyDetectionStreamingJob').input.namespace)]",
        "[resourceId('Microsoft.EventHub/namespaces', variables('anomalyDetectionStreamingJob').output.namespace)]"
      ]
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('workerFunction').storageAccountName]",
      "apiVersion": "2015-06-15",
      "location": "[resourceGroup().location]",
      "properties": {
        "accountType": "[variables('workerFunction').storageAccountType]"
      }
    },
    {
      "type": "Microsoft.Web/serverfarms",
      "apiVersion": "2015-04-01",
      "name": "[variables('workerFunction').hostingPlanName]",
      "location": "[resourceGroup().location]",
      "properties": {
        "name": "[variables('workerFunction').hostingPlanName]",
        "computeMode": "Dynamic",
        "sku": "Dynamic"
      }
    },
    {
      "apiVersion": "2015-08-01",
      "type": "Microsoft.Web/sites",
      "name": "[variables('workerFunction').containerName]",
      "location": "[resourceGroup().location]",
      "kind": "functionapp",
      "dependsOn": [
        "[resourceId('Microsoft.Web/serverfarms', variables('workerFunction').hostingPlanName)]",
        "[resourceId('Microsoft.Storage/storageAccounts', variables('workerFunction').storageAccountName)]",
        "[resourceId('Microsoft.EventHub/Namespaces/', variables('anomalyDataEventHub').namespace)]"
      ],
      "properties": {
        "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('workerFunction').hostingPlanName)]",
        "siteConfig": {
          "appSettings": [
            {
              "name": "AzureWebJobsDashboard",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('workerFunction').storageAccountName, ';AccountKey=', listKeys(variables('workerFunction').storageAccountId,'2015-05-01-preview').key1)]"
            },
            {
              "name": "AzureWebJobsStorage",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('workerFunction').storageAccountName, ';AccountKey=', listKeys(variables('workerFunction').storageAccountId,'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
              "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('workerFunction').storageAccountName, ';AccountKey=', listKeys(variables('workerFunction').storageAccountId,'2015-05-01-preview').key1)]"
            },
            {
              "name": "WEBSITE_CONTENTSHARE",
              "value": "[toLower(variables('workerFunction').containerName)]"
            },
            {
              "name": "FUNCTIONS_EXTENSION_VERSION",
              "value": "~1"
            },
            {
              "name": "WEBSITE_NODE_DEFAULT_VERSION",
              "value": "6.5.0"
            },
            {
              "name": "eventHubConnection",
              "value": "[listKeys(resourceId('Microsoft.Eventhub/namespaces/authorizationRules', variables('anomalyDataEventHub').namespace, variables('anomalyDataEventHub').keyName), '2014-09-01').primaryConnectionString]"
            }
          ]
        }
      },
      "resources": [
        {
          "apiVersion": "2015-08-01",
          "name": "web",
          "type": "sourcecontrols",
          "properties": {
            "RepoUrl": "[variables('workerFunction').repoUrl]",
            "branch": "[variables('workerFunction').branch]",
            "IsManualIntegration": true
          },
          "dependsOn": [
            "[resourceId('Microsoft.Web/sites', variables('workerFunction').containerName)]"
          ]
        }
      ]
    },

    {
      "type": "Microsoft.Storage/storageAccounts",
      "name": "[variables('workerVM').storage.accountName]",
      "apiVersion": "2017-06-01",
      "location": "[resourceGroup().location]",
      "sku": {
        "name": "[variables('workerVM').storage.accountType]"
      },
      "kind": "Storage",
      "properties": {}
    },
    {
      "apiVersion": "2017-04-01",
      "type": "Microsoft.Network/publicIPAddresses",
      "name": "[variables('workerVM').network.publicIPAddressName]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publicIPAllocationMethod": "[variables('workerVM').network.publicIPAddressType]",
        "dnsSettings": {
          "domainNameLabel": "[variables('workerVM').network.dnsLabelPrefix]"
        }
      }
    },
    {
      "apiVersion": "2017-04-01",
      "type": "Microsoft.Network/virtualNetworks",
      "name": "[variables('workerVM').network.virtualNetworkName]",
      "location": "[resourceGroup().location]",
      "properties": {
        "addressSpace": {
          "addressPrefixes": [
            "[variables('workerVM').network.addressPrefix]"
          ]
        },
        "subnets": [
          {
            "name": "[variables('workerVM').network.subnetName]",
            "properties": {
              "addressPrefix": "[variables('workerVM').network.subnetPrefix]"
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2017-04-01",
      "type": "Microsoft.Network/networkInterfaces",
      "name": "[variables('workerVM').network.nicName]",
      "location": "[resourceGroup().location]",
      "dependsOn": [
        "[resourceId('Microsoft.Network/publicIPAddresses/', variables('workerVM').network.publicIPAddressName)]",
        "[resourceId('Microsoft.Network/virtualNetworks/', variables('workerVM').network.virtualNetworkName)]"
      ],
      "properties": {
        "ipConfigurations": [
          {
            "name": "ipconfig1",
            "properties": {
              "privateIPAllocationMethod": "Dynamic",
              "publicIPAddress": {
                "id": "[resourceId('Microsoft.Network/publicIPAddresses', variables('workerVM').network.publicIPAddressName)]"
              },
              "subnet": {
                "id": "[variables('workerVM').network.subnetRef]"
              }
            }
          }
        ]
      }
    },
    {
      "apiVersion": "2016-03-30",
      "type": "Microsoft.Compute/virtualMachines",
      "name": "[variables('workerVM').machine.name]",
      "location": "[resourceGroup().location]",
      "properties": {
        "hardwareProfile": {
          "vmSize": "[variables('workerVM').machine.size]"
        },
        "storageProfile": {
          "osDisk": {
            "osType": "Linux",
            "name": "[variables('workerVM').machine.imageName]",
            "createOption": "FromImage",
            "image": {
              "uri": "[variables('workerVM').machine.imageUri]"
            },
            "vhd": {
              "uri": "[variables('workerVM').machine.vhdUri]"
            },
            "caching": "ReadWrite"
          }
        },
        "osProfile": {
          "computerName": "[variables('workerVM').machine.name]",
          "adminUsername": "[variables('workerVM').machine.adminUsername]",
          "adminPassword": "[variables('workerVM').machine.adminPassword]"
        },
        "networkProfile": {
          "networkInterfaces": [
            {
              "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('workerVM').network.nicName)]"
            }
          ]
        },
        "diagnosticsProfile": {
          "bootDiagnostics": {
            "enabled": false
          }
        },
        "provisioningState": 0
      },
      "dependsOn": [
        "[resourceId('Microsoft.Network/networkInterfaces/', variables('workerVM').network.nicName)]"
      ]
    },
    {
      "apiVersion": "2015-06-15",
      "type": "Microsoft.Compute/virtualMachines/extensions",
      "name": "[concat(variables('workerVM').machine.name,'/', 'EnvironmentVariablesExtension')]",
      "location": "[resourceGroup().location]",
      "properties": {
        "publisher": "Microsoft.Azure.Extensions",
        "type": "CustomScript",
        "typeHandlerVersion": "2.0",
        "autoUpgradeMinorVersion": true,
        "settings": {
          "commandToExecute": "echo 'FOO=bar baz' >> /etc/environment"
        }
      },
      "dependsOn": [
        "[resourceId('Microsoft.Compute/virtualMachines/', variables('workerVM').machine.name)]",
        "[resourceId('Microsoft.EventHub/Namespaces/', variables('anomalyDataEventHub').namespace)]"
      ]
    }
  ]
}